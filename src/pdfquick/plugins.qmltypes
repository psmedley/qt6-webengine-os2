import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "qabstractitemmodel.h"
        name: "QAbstractListModel"
        accessSemantics: "reference"
        prototype: "QAbstractItemModel"
    }
    Component {
        file: "qpdfdocument.h"
        name: "QPdfDocument"
        accessSemantics: "reference"
        prototype: "QObject"
        Enum {
            name: "Status"
            values: ["Null", "Loading", "Ready", "Unloading", "Error"]
        }
        Enum {
            name: "DocumentError"
            values: [
                "NoError",
                "UnknownError",
                "DataNotYetAvailableError",
                "FileNotFoundError",
                "InvalidFileFormatError",
                "IncorrectPasswordError",
                "UnsupportedSecuritySchemeError"
            ]
        }
        Enum {
            name: "MetaDataField"
            values: [
                "Title",
                "Subject",
                "Author",
                "Keywords",
                "Producer",
                "Creator",
                "CreationDate",
                "ModificationDate"
            ]
        }
        Property {
            name: "pageCount"
            type: "int"
            read: "pageCount"
            notify: "pageCountChanged"
            index: 0
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "password"
            type: "QString"
            read: "password"
            write: "setPassword"
            notify: "passwordChanged"
            index: 1
            isFinal: true
        }
        Property {
            name: "status"
            type: "Status"
            read: "status"
            notify: "statusChanged"
            index: 2
            isReadonly: true
            isFinal: true
        }
        Signal { name: "passwordChanged" }
        Signal { name: "passwordRequired" }
        Signal {
            name: "statusChanged"
            Parameter { name: "status"; type: "QPdfDocument::Status" }
        }
        Signal {
            name: "pageCountChanged"
            Parameter { name: "pageCount"; type: "int" }
        }
        Method { name: "_q_tryLoadingWithSizeFromContentHeader" }
        Method { name: "_q_copyFromSequentialSourceDevice" }
        Method {
            name: "getSelection"
            type: "QPdfSelection"
            Parameter { name: "page"; type: "int" }
            Parameter { name: "start"; type: "QPointF" }
            Parameter { name: "end"; type: "QPointF" }
        }
        Method {
            name: "getSelectionAtIndex"
            type: "QPdfSelection"
            Parameter { name: "page"; type: "int" }
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "maxLength"; type: "int" }
        }
        Method {
            name: "getAllText"
            type: "QPdfSelection"
            Parameter { name: "page"; type: "int" }
        }
    }
    Component {
        file: "private/qpdflinkmodel_p.h"
        name: "QPdfLinkModel"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
        Enum {
            name: "Role"
            values: ["Rect", "Url", "Page", "Location", "Zoom", "_Count"]
        }
        Property {
            name: "document"
            type: "QPdfDocument"
            isPointer: true
            read: "document"
            write: "setDocument"
            notify: "documentChanged"
            index: 0
        }
        Property {
            name: "page"
            type: "int"
            read: "page"
            write: "setPage"
            notify: "pageChanged"
            index: 1
        }
        Signal { name: "documentChanged" }
        Signal {
            name: "pageChanged"
            Parameter { name: "page"; type: "int" }
        }
        Method {
            name: "setDocument"
            Parameter { name: "document"; type: "QPdfDocument"; isPointer: true }
        }
        Method {
            name: "setPage"
            Parameter { name: "page"; type: "int" }
        }
        Method {
            name: "onStatusChanged"
            Parameter { name: "status"; type: "QPdfDocument::Status" }
        }
    }
    Component {
        file: "qpdfsearchmodel.h"
        name: "QPdfSearchModel"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
        Enum {
            name: "Role"
            values: [
                "Page",
                "IndexOnPage",
                "Location",
                "ContextBefore",
                "ContextAfter",
                "_Count"
            ]
        }
        Property {
            name: "document"
            type: "QPdfDocument"
            isPointer: true
            read: "document"
            write: "setDocument"
            notify: "documentChanged"
            index: 0
        }
        Property {
            name: "searchString"
            type: "QString"
            read: "searchString"
            write: "setSearchString"
            notify: "searchStringChanged"
            index: 1
        }
        Signal { name: "documentChanged" }
        Signal { name: "searchStringChanged" }
        Method {
            name: "setSearchString"
            Parameter { name: "searchString"; type: "QString" }
        }
        Method {
            name: "setDocument"
            Parameter { name: "document"; type: "QPdfDocument"; isPointer: true }
        }
    }
    Component {
        file: "private/qquickpdfdocument_p.h"
        name: "QQuickPdfDocument"
        accessSemantics: "reference"
        prototype: "QObject"
        extension: "QPdfDocument"
        interfaces: ["QQmlParserStatus"]
        exports: [
            "QtQuick.Pdf/PdfDocument 5.15",
            "QtQuick.Pdf/PdfDocument 6.0"
        ]
        exportMetaObjectRevisions: [1295, 1536]
        Property {
            name: "source"
            type: "QUrl"
            read: "source"
            write: "setSource"
            notify: "sourceChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "maxPageWidth"
            type: "double"
            read: "maxPageWidth"
            notify: "metaDataChanged"
            index: 1
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "maxPageHeight"
            type: "double"
            read: "maxPageHeight"
            notify: "metaDataChanged"
            index: 2
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "error"
            type: "QString"
            read: "error"
            notify: "errorChanged"
            index: 3
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "title"
            type: "QString"
            read: "title"
            notify: "metaDataChanged"
            index: 4
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "subject"
            type: "QString"
            read: "subject"
            notify: "metaDataChanged"
            index: 5
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "author"
            type: "QString"
            read: "author"
            notify: "metaDataChanged"
            index: 6
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "keywords"
            type: "QString"
            read: "keywords"
            notify: "metaDataChanged"
            index: 7
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "producer"
            type: "QString"
            read: "producer"
            notify: "metaDataChanged"
            index: 8
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "creator"
            type: "QString"
            read: "creator"
            notify: "metaDataChanged"
            index: 9
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "creationDate"
            type: "QDateTime"
            read: "creationDate"
            notify: "metaDataChanged"
            index: 10
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "modificationDate"
            type: "QDateTime"
            read: "modificationDate"
            notify: "metaDataChanged"
            index: 11
            isReadonly: true
            isFinal: true
        }
        Signal { name: "sourceChanged" }
        Signal { name: "errorChanged" }
        Signal { name: "metaDataChanged" }
        Method {
            name: "pagePointSize"
            type: "QSizeF"
            Parameter { name: "page"; type: "int" }
        }
    }
    Component {
        file: "private/qquickpdflinkmodel_p.h"
        name: "QQuickPdfLinkModel"
        accessSemantics: "reference"
        prototype: "QPdfLinkModel"
        exports: [
            "QtQuick.Pdf/PdfLinkModel 5.15",
            "QtQuick.Pdf/PdfLinkModel 6.0"
        ]
        exportMetaObjectRevisions: [1295, 1536]
        Property {
            name: "document"
            type: "QQuickPdfDocument"
            isPointer: true
            read: "document"
            write: "setDocument"
            notify: "documentChanged"
            index: 0
        }
        Signal { name: "documentChanged" }
    }
    Component {
        file: "private/qquickpdfnavigationstack_p.h"
        name: "QQuickPdfNavigationStack"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: [
            "QtQuick.Pdf/PdfNavigationStack 5.15",
            "QtQuick.Pdf/PdfNavigationStack 6.0"
        ]
        exportMetaObjectRevisions: [1295, 1536]
        Property {
            name: "currentPage"
            type: "int"
            read: "currentPage"
            notify: "currentPageChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "currentLocation"
            type: "QPointF"
            read: "currentLocation"
            notify: "currentLocationChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "currentZoom"
            type: "double"
            read: "currentZoom"
            notify: "currentZoomChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "backAvailable"
            type: "bool"
            read: "backAvailable"
            notify: "backAvailableChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "forwardAvailable"
            type: "bool"
            read: "forwardAvailable"
            notify: "forwardAvailableChanged"
            index: 4
            isReadonly: true
        }
        Signal { name: "currentPageChanged" }
        Signal { name: "currentLocationChanged" }
        Signal { name: "currentZoomChanged" }
        Signal { name: "backAvailableChanged" }
        Signal { name: "forwardAvailableChanged" }
        Signal {
            name: "jumped"
            Parameter { name: "page"; type: "int" }
            Parameter { name: "location"; type: "QPointF" }
            Parameter { name: "zoom"; type: "double" }
        }
        Method {
            name: "push"
            Parameter { name: "page"; type: "int" }
            Parameter { name: "location"; type: "QPointF" }
            Parameter { name: "zoom"; type: "double" }
            Parameter { name: "emitJumped"; type: "bool" }
        }
        Method {
            name: "push"
            Parameter { name: "page"; type: "int" }
            Parameter { name: "location"; type: "QPointF" }
            Parameter { name: "zoom"; type: "double" }
        }
        Method {
            name: "update"
            Parameter { name: "page"; type: "int" }
            Parameter { name: "location"; type: "QPointF" }
            Parameter { name: "zoom"; type: "double" }
        }
        Method { name: "forward" }
        Method { name: "back" }
    }
    Component {
        file: "private/qquickpdfsearchmodel_p.h"
        name: "QQuickPdfSearchModel"
        accessSemantics: "reference"
        prototype: "QPdfSearchModel"
        exports: [
            "QtQuick.Pdf/PdfSearchModel 5.15",
            "QtQuick.Pdf/PdfSearchModel 6.0"
        ]
        exportMetaObjectRevisions: [1295, 1536]
        Property {
            name: "document"
            type: "QQuickPdfDocument"
            isPointer: true
            read: "document"
            write: "setDocument"
            notify: "documentChanged"
            index: 0
        }
        Property {
            name: "currentPage"
            type: "int"
            read: "currentPage"
            write: "setCurrentPage"
            notify: "currentPageChanged"
            index: 1
        }
        Property {
            name: "currentResult"
            type: "int"
            read: "currentResult"
            write: "setCurrentResult"
            notify: "currentResultChanged"
            index: 2
        }
        Property {
            name: "currentPageBoundingPolygons"
            type: "QList<QPolygonF>"
            read: "currentPageBoundingPolygons"
            notify: "currentPageBoundingPolygonsChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "currentResultBoundingPolygons"
            type: "QList<QPolygonF>"
            read: "currentResultBoundingPolygons"
            notify: "currentResultBoundingPolygonsChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "currentResultBoundingRect"
            type: "QRectF"
            read: "currentResultBoundingRect"
            notify: "currentResultBoundingRectChanged"
            index: 5
            isReadonly: true
        }
        Signal { name: "documentChanged" }
        Signal { name: "currentPageChanged" }
        Signal { name: "currentResultChanged" }
        Signal { name: "currentPageBoundingPolygonsChanged" }
        Signal { name: "currentResultBoundingPolygonsChanged" }
        Signal { name: "currentResultBoundingRectChanged" }
        Method {
            name: "boundingPolygonsOnPage"
            type: "QList<QPolygonF>"
            Parameter { name: "page"; type: "int" }
        }
    }
    Component {
        file: "private/qquickpdfselection_p.h"
        name: "QQuickPdfSelection"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: [
            "QtQuick.Pdf/PdfSelection 5.15",
            "QtQuick.Pdf/PdfSelection 6.0",
            "QtQuick.Pdf/PdfSelection 6.3"
        ]
        exportMetaObjectRevisions: [1295, 1536, 1539]
        Property {
            name: "document"
            type: "QQuickPdfDocument"
            isPointer: true
            read: "document"
            write: "setDocument"
            notify: "documentChanged"
            index: 0
        }
        Property {
            name: "page"
            type: "int"
            read: "page"
            write: "setPage"
            notify: "pageChanged"
            index: 1
        }
        Property {
            name: "renderScale"
            type: "double"
            read: "renderScale"
            write: "setRenderScale"
            notify: "renderScaleChanged"
            index: 2
        }
        Property {
            name: "fromPoint"
            type: "QPointF"
            read: "fromPoint"
            write: "setFromPoint"
            notify: "fromPointChanged"
            index: 3
        }
        Property {
            name: "toPoint"
            type: "QPointF"
            read: "toPoint"
            write: "setToPoint"
            notify: "toPointChanged"
            index: 4
        }
        Property {
            name: "hold"
            type: "bool"
            read: "hold"
            write: "setHold"
            notify: "holdChanged"
            index: 5
        }
        Property {
            name: "text"
            type: "QString"
            read: "text"
            notify: "textChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "geometry"
            type: "QList<QPolygonF>"
            read: "geometry"
            notify: "selectedAreaChanged"
            index: 7
            isReadonly: true
        }
        Signal { name: "documentChanged" }
        Signal { name: "pageChanged" }
        Signal { name: "renderScaleChanged" }
        Signal { name: "fromPointChanged" }
        Signal { name: "toPointChanged" }
        Signal { name: "holdChanged" }
        Signal { name: "textChanged" }
        Signal { name: "selectedAreaChanged" }
        Method { name: "clear" }
        Method { name: "selectAll" }
        Method { name: "copyToClipboard" }
        Method {
            name: "inputMethodQuery"
            type: "QVariant"
            Parameter { name: "query"; type: "Qt::InputMethodQuery" }
            Parameter { name: "argument"; type: "QVariant" }
        }
    }
}
